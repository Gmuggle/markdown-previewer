{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["placeHolderText","maxIcon","maxSize","normalSize","Editor","id","className","this","props","name","type","onClick","resize","btnIcon","onChange","handle","React","Component","Previewer","previewHeight","dangerouslySetInnerHTML","__html","marked","text","App","state","input","editorSize","editorClass","editorBtn","previewSize","previewClass","previewBtn","handleInput","bind","resizeEditor","resizePreview","event","setState","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAMMA,EAAe,4qCA8DfC,EAAU,wBAEVC,EAAU,+BAEVC,EAAa,0DAGbC,E,iLAME,OACI,6BACI,yBAAKC,GAAG,gBAAgBC,UAAWC,KAAKC,MAAMC,MAC9C,yBAAKJ,GAAG,aAAaC,UAAU,OAC3B,wBAAIA,UAAU,+BAAd,UACA,4BAAQA,UAAU,6FAA6FI,KAAK,SAASC,QAASJ,KAAKC,MAAMI,QAAQ,uBAAGN,UAAWC,KAAKC,MAAMK,YAEtL,8BAAUR,GAAG,SAASS,SAAUP,KAAKC,MAAMO,QAASf,S,GAb/CgB,IAAMC,WAoBrBC,E,iLAME,OACI,6BACI,yBAAKb,GAAG,kBAAkBC,UAAWC,KAAKC,MAAMC,MAChD,yBAAKJ,GAAG,cAAcC,UAAU,OAC5B,wBAAIA,UAAU,+BAAd,aACA,4BAAQA,UAAU,6FAA6FI,KAAK,SAASC,QAASJ,KAAKC,MAAMI,QAAQ,uBAAGN,UAAWC,KAAKC,MAAMK,YAEtL,yBAAKR,GAAG,UAAUC,UAAWC,KAAKC,MAAMW,cAAeC,wBAAyB,CAACC,OAAQC,IAAOf,KAAKC,MAAMe,e,GAbnGP,IAAMC,WA2FfO,E,YAtEX,WAAYhB,GAAQ,IAAD,8BACf,4CAAMA,KACDiB,MAAQ,CACTC,MAAO1B,EAEP2B,YAAY,EACZC,YAAazB,EACb0B,UAAW5B,EAEX6B,aAAa,EACbC,aAAc5B,EACd6B,WAAY/B,GAEhB,EAAKgC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAfN,E,yEAkBPG,GACR9B,KAAK+B,SAAS,CACVZ,MAAOW,EAAME,OAAOC,U,sCAKM,IAA1BjC,KAAKkB,MAAME,WACXpB,KAAK+B,SAAS,CACVX,YAAY,EACZC,YAAa1B,EACb2B,UA9EA,wBA+EAE,aA3EA,QA8EJxB,KAAK+B,SAAS,CACVX,YAAY,EACZC,YAAazB,EACb0B,UAAW5B,EACX8B,aAAc5B,M,uCAMS,IAA3BI,KAAKkB,MAAMK,YACXvB,KAAK+B,SAAS,CACVR,aAAa,EACbC,aAAc7B,EACd8B,WAhGA,wBAiGAJ,YA7FA,QAgGJrB,KAAK+B,SAAS,CACVR,aAAa,EACbC,aAAc5B,EACd6B,WAAY/B,EACZ2B,YAAazB,M,+BAMrB,OACI,6BACI,kBAAC,EAAD,CAAQY,OAAQR,KAAK0B,YAAarB,OAAQL,KAAK4B,aAAc1B,KAAMF,KAAKkB,MAAMG,YAAaf,QAASN,KAAKkB,MAAMI,YAC/G,kBAAC,EAAD,CAAWN,KAAMhB,KAAKkB,MAAMC,MAAOd,OAAQL,KAAK6B,cAAe3B,KAAMF,KAAKkB,MAAMM,aAAclB,QAASN,KAAKkB,MAAMO,kB,GAjEhHhB,IAAMC,WCvGJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ecd9e20.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport marked from 'marked';\n\n\nconst placeHolderText = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)`;\n\n// Create reference instance\n//const marked = require('marked');\n\n// Set options\n// `highlight` example uses `highlight.js`\n/* marked.setOptions({\n  pedantic: false,\n  gfm: true,\n  breaks: true,\n  sanitize: false,\n  smartLists: true,\n  smartypants: false,\n  xhtml: false\n}); */\n\nconst minIcon = \"fa fa-window-minimize\";\nconst maxIcon = \"fa fa-window-maximize\";\n\nconst maxSize = \"max well col-xs-12 col-md-12\";\nconst minSize = \"min\";\nconst normalSize = \"well col-xs-10 col-xs-offset-1 col-md-4 col-md-offset-1\";\n\n\nclass Editor extends React.Component {\n/*     constructor(props) {\n        super(props);\n    } */\n\n    render() {\n        return (\n            <div>\n                <div id=\"editor-wapper\" className={this.props.name}>\n                <div id=\"editor-bar\" className=\"row\">\n                    <h2 className=\"col-xs-6 col-md-6 text-left\">Editor</h2>\n                    <button className=\"btn btn-default col-xs-2 col-xs-offset-4 col-md-2 col-md-offset-4 col-lg-1 col-lg-offset-5\" type=\"button\" onClick={this.props.resize}><i className={this.props.btnIcon}></i></button>\n                </div>\n                <textarea id=\"editor\" onChange={this.props.handle}>{placeHolderText}</textarea>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Previewer extends React.Component {\n/*     constructor(props) {\n        super(props);\n    } */\n\n    render() {\n        return (\n            <div>\n                <div id=\"preview-wrapper\" className={this.props.name}>\n                <div id=\"preview-bar\" className=\"row\">\n                    <h2 className=\"col-xs-6 col-md-6 text-left\">Previewer</h2>\n                    <button className=\"btn btn-default col-xs-2 col-xs-offset-4 col-md-2 col-md-offset-4 col-lg-1 col-lg-offset-5\" type=\"button\" onClick={this.props.resize}><i className={this.props.btnIcon}></i></button>\n                </div>\n                <div id=\"preview\" className={this.props.previewHeight} dangerouslySetInnerHTML={{__html: marked(this.props.text)}}></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: placeHolderText,\n\n            editorSize: false,\n            editorClass: normalSize,\n            editorBtn: maxIcon,\n\n            previewSize: false,\n            previewClass: normalSize,\n            previewBtn: maxIcon\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.resizeEditor = this.resizeEditor.bind(this);\n        this.resizePreview = this.resizePreview.bind(this);\n    }\n\n    handleInput(event) {\n        this.setState({\n            input: event.target.value\n        });\n    }\n\n    resizeEditor() {\n        if (this.state.editorSize === false) {\n            this.setState({\n                editorSize: true,\n                editorClass: maxSize,\n                editorBtn: minIcon,\n                previewClass: minSize,\n            });\n        }else {\n            this.setState({\n                editorSize: false,\n                editorClass: normalSize,\n                editorBtn: maxIcon,\n                previewClass: normalSize\n            });\n        }\n    }\n\n    resizePreview() {\n        if (this.state.previewSize === false) {\n            this.setState({\n                previewSize: true,\n                previewClass: maxSize,\n                previewBtn: minIcon,\n                editorClass: minSize\n            });\n        }else {\n            this.setState({\n                previewSize: false,\n                previewClass: normalSize,\n                previewBtn: maxIcon,\n                editorClass: normalSize\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Editor handle={this.handleInput} resize={this.resizeEditor} name={this.state.editorClass} btnIcon={this.state.editorBtn} />\n                <Previewer text={this.state.input} resize={this.resizePreview} name={this.state.previewClass} btnIcon={this.state.previewBtn} /> \n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import $ from  'jquery';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}